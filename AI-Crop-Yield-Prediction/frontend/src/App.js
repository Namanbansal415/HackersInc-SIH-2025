import React, { useState, useEffect } from "react";
import Select from "react-select";
import "./style.css";

function App() {
  const [crop, setCrop] = useState(null);
  const [season, setSeason] = useState(null);
  const [state, setState] = useState(null);
  const [district, setDistrict] = useState(null);
  const [language, setLanguage] = useState({ value: "en", label: "English" });
  const [result, setResult] = useState("");
  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });
  const [visible, setVisible] = useState(false);

  // Dummy district data (replace with real mapping later)
  const districtData = {
    "Uttar Pradesh": ["Lucknow", "Varanasi", "Kanpur", "Agra"],
    "Maharashtra": ["Mumbai", "Pune", "Nagpur"],
    "Tamil Nadu": ["Chennai", "Madurai", "Coimbatore"],
    "Bihar": ["Patna", "Gaya", "Bhagalpur"]
  };

  // Custom cursor
  useEffect(() => {
    const handleMouseMove = (e) => setMousePos({ x: e.clientX, y: e.clientY });
    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  // Animate form container on load
  useEffect(() => {
    const timer = setTimeout(() => setVisible(true), 300);
    return () => clearTimeout(timer);
  }, []);

  // Translations
  const translations = {
    en: { title: "üå± AI-Powered Crop Yield Prediction", selectCrop: "Select Crop", selectSeason: "Select Season", selectState: "Select State", predict: "üåø Predict Yield", language: "üåê Language", warning: "‚ö†Ô∏è Please select crop, season, and state!" },
    hi: { title: "üå± ‡§è‡§Ü‡§à ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§´‡§∏‡§≤ ‡§â‡§™‡§ú ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®", selectCrop: "‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç", selectSeason: "‡§Æ‡•å‡§∏‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç", selectState: "‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç", predict: "üåø ‡§â‡§™‡§ú ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®", language: "üåê ‡§≠‡§æ‡§∑‡§æ", warning: "‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§∏‡§≤, ‡§Æ‡•å‡§∏‡§Æ ‡§î‡§∞ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç!" },
    bn: { title: "üå± ‡¶ï‡ßÉ‡¶§‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§‡¶æ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶´‡¶∏‡¶≤‡ßá‡¶∞ ‡¶´‡¶≤‡¶® ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏", selectCrop: "‡¶´‡¶∏‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", selectSeason: "‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", selectState: "‡¶∞‡¶æ‡¶ú‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", predict: "üåø ‡¶´‡¶≤‡¶® ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏", language: "üåê ‡¶≠‡¶æ‡¶∑‡¶æ", warning: "‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶´‡¶∏‡¶≤, ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶æ‡¶ú‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®!" },
    te: { title: "üå± ‡∞ï‡±É‡∞§‡±ç‡∞∞‡∞ø‡∞Æ ‡∞Æ‡±á‡∞ß‡∞∏‡±ç‡∞∏‡±Å‡∞§‡±ã ‡∞™‡∞Ç‡∞ü ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ", selectCrop: "‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", selectSeason: "‡∞ï‡∞æ‡∞≤‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", selectState: "‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", predict: "üåø ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø‡∞®‡∞ø ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø", language: "üåê ‡∞≠‡∞æ‡∞∑", warning: "‚ö†Ô∏è ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞™‡∞Ç‡∞ü, ‡∞ï‡∞æ‡∞≤‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø!" },
    ta: { title: "üå± ‡Æö‡ØÜ‡ÆØ‡Æ±‡Øç‡Æï‡Øà ‡Æ®‡ØÅ‡Æ£‡Øç‡Æ£‡Æ±‡Æø‡Æµ‡ØÅ‡Æü‡Æ©‡Øç ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æâ‡Æ±‡Øç‡Æ™‡Æ§‡Øç‡Æ§‡Æø ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡ØÅ", selectCrop: "‡Æ™‡ÆØ‡Æø‡Æ∞‡Øà ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç", selectSeason: "‡Æö‡ØÄ‡Æö‡Æ©‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç", selectState: "‡ÆÆ‡Ææ‡Æ®‡Æø‡Æ≤‡ÆÆ‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç", predict: "üåø ‡Æâ‡Æ±‡Øç‡Æ™‡Æ§‡Øç‡Æ§‡Æø‡ÆØ‡Øà ‡Æï‡Æ£‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç", language: "üåê ‡ÆÆ‡Øä‡Æ¥‡Æø", warning: "‚ö†Ô∏è ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç, ‡Æö‡ØÄ‡Æö‡Æ©‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Ææ‡Æ®‡Æø‡Æ≤‡Æ§‡Øç‡Æ§‡Øà ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç!" },
    mr: { title: "üå± ‡§è‡§Ü‡§Ø ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§™‡•Ä‡§ï ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§æ‡§ö‡§æ ‡§Ö‡§Ç‡§¶‡§æ‡§ú", selectCrop: "‡§™‡•Ä‡§ï ‡§®‡§ø‡§µ‡§°‡§æ", selectSeason: "‡§π‡§Ç‡§ó‡§æ‡§Æ ‡§®‡§ø‡§µ‡§°‡§æ", selectState: "‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§®‡§ø‡§µ‡§°‡§æ", predict: "üåø ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§æ‡§ö‡§æ ‡§Ö‡§Ç‡§¶‡§æ‡§ú", language: "üåê ‡§≠‡§æ‡§∑‡§æ", warning: "‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Ä‡§ï, ‡§π‡§Ç‡§ó‡§æ‡§Æ ‡§Ü‡§£‡§ø ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§®‡§ø‡§µ‡§°‡§æ!" },
    gu: { title: "üå± AI ‡™¶‡´ç‡™µ‡™æ‡™∞‡™æ ‡™™‡™æ‡™ï ‡™â‡™§‡´ç‡™™‡™æ‡™¶‡™®‡™®‡´Ä ‡™Ü‡™ó‡™æ‡™π‡´Ä", selectCrop: "‡™™‡™æ‡™ï ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã", selectSeason: "‡™Æ‡´å‡™∏‡™Æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã", selectState: "‡™∞‡™æ‡™ú‡´ç‡™Ø ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã", predict: "üåø ‡™â‡™§‡´ç‡™™‡™æ‡™¶‡™®‡™®‡´Ä ‡™Ü‡™ó‡™æ‡™π‡´Ä", language: "üåê ‡™≠‡™æ‡™∑‡™æ", warning: "‚ö†Ô∏è ‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á ‡™™‡™æ‡™ï, ‡™Æ‡´å‡™∏‡™Æ ‡™Ö‡™®‡´á ‡™∞‡™æ‡™ú‡´ç‡™Ø ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã!" },
    kn: { title: "üå± AI ‡≤¨‡≤≥‡≤∏‡≤ø ‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤â‡≤§‡≥ç‡≤™‡≤æ‡≤¶‡≤®‡≥Ü ‡≤Ö‡≤Ç‡≤¶‡≤æ‡≤ú‡≥Å", selectCrop: "‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø", selectSeason: "‡≤ã‡≤§‡≥Å‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø", selectState: "‡≤∞‡≤æ‡≤ú‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø", predict: "üåø ‡≤â‡≤§‡≥ç‡≤™‡≤æ‡≤¶‡≤®‡≥Ü ‡≤Ö‡≤Ç‡≤¶‡≤æ‡≤ú‡≥Å", language: "üåê ‡≤≠‡≤æ‡≤∑‡≥Ü", warning: "‚ö†Ô∏è ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤¨‡≥Ü‡≤≥‡≥Ü, ‡≤ã‡≤§‡≥Å‡≤µ‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∞‡≤æ‡≤ú‡≥ç‡≤Ø ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø!" },
    ml: { title: "üå± ‡¥é‡¥ê ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥µ‡¥ø‡¥≥‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥â‡¥§‡µç‡¥™‡¥æ‡¥¶‡¥®‡¥Ç ‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥®‡¥Ç", selectCrop: "‡¥µ‡¥≥‡µæ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï", selectSeason: "‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï", selectState: "‡¥∏‡¥Ç‡¥∏‡µç‡¥•‡¥æ‡¥®‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï", predict: "üåø ‡¥â‡¥§‡µç‡¥™‡¥æ‡¥¶‡¥®‡¥Ç ‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï", language: "üåê ‡¥≠‡¥æ‡¥∑", warning: "‚ö†Ô∏è ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡¥ø‡¥≥, ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•, ‡¥∏‡¥Ç‡¥∏‡µç‡¥•‡¥æ‡¥®‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï!" },
    pa: { title: "üå± ‡®è‡®Ü‡®à ‡®®‡®æ‡®≤ ‡®´‡®∏‡®≤ ‡®â‡®™‡®ú ‡®Ö‡®®‡©Å‡®Æ‡®æ‡®®", selectCrop: "‡®´‡®∏‡®≤ ‡®ö‡©Å‡®£‡©ã", selectSeason: "‡®Æ‡©å‡®∏‡®Æ ‡®ö‡©Å‡®£‡©ã", selectState: "‡®∞‡®æ‡®ú ‡®ö‡©Å‡®£‡©ã", predict: "üåø ‡®â‡®™‡®ú ‡®Ö‡®®‡©Å‡®Æ‡®æ‡®®", language: "üåê ‡®≠‡®æ‡®∏‡®º‡®æ", warning: "‚ö†Ô∏è ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®´‡®∏‡®≤, ‡®Æ‡©å‡®∏‡®Æ ‡®Ö‡®§‡©á ‡®∞‡®æ‡®ú ‡®ö‡©Å‡®£‡©ã!" },
    or: { title: "üå± AI ‡¨¶‡≠ç‡≠±‡¨æ‡¨∞‡¨æ ‡¨´‡¨∏‡¨≤ ‡¨â‡¨§‡≠ç‡¨™‡¨æ‡¨¶‡¨® ‡¨™‡≠Ç‡¨∞‡≠ç‡¨¨‡¨æ‡¨®‡≠Å‡¨Æ‡¨æ‡¨®", selectCrop: "‡¨´‡¨∏‡¨≤ ‡¨ö‡≠ü‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å", selectSeason: "‡¨Æ‡≠å‡¨∏‡¨Æ ‡¨ö‡≠ü‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å", selectState: "‡¨∞‡¨æ‡¨ú‡≠ç‡≠ü ‡¨ö‡≠ü‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å", predict: "üåø ‡¨â‡¨§‡≠ç‡¨™‡¨æ‡¨¶‡¨® ‡¨™‡≠Ç‡¨∞‡≠ç‡¨¨‡¨æ‡¨®‡≠Å‡¨Æ‡¨æ‡¨®", language: "üåê ‡¨≠‡¨æ‡¨∑‡¨æ", warning: "‚ö†Ô∏è ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨´‡¨∏‡¨≤, ‡¨Æ‡≠å‡¨∏‡¨Æ ‡¨è‡¨¨‡¨Ç ‡¨∞‡¨æ‡¨ú‡≠ç‡≠ü ‡¨ö‡≠ü‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!" }
  };

  const statesOfIndia = ["Andhra Pradesh","Arunachal Pradesh","Assam","Bihar","Chhattisgarh","Goa","Gujarat","Haryana","Himachal Pradesh","Jharkhand","Karnataka","Kerala","Madhya Pradesh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Tamil Nadu","Telangana","Tripura","Uttar Pradesh","Uttarakhand","West Bengal","Delhi","Jammu and Kashmir","Ladakh"].map(s => ({ value: s, label: s }));

  const crops = ["Rice","Wheat","Maize","Barley","Bajra","Jowar","Sugarcane","Cotton","Mustard","Soybean","Pulses","Groundnut","Tea","Coffee","Potato","Onion","Tomato"].map(c => ({ value: c, label: c }));

  const seasons = ["Kharif","Rabi","Zaid"].map(s => ({ value: s, label: s }));

  const languages = [
    { value: "en", label: "English" }, { value: "hi", label: "Hindi" }, { value: "bn", label: "Bengali" },
    { value: "te", label: "Telugu" }, { value: "ta", label: "Tamil" }, { value: "mr", label: "Marathi" },
    { value: "gu", label: "Gujarati" }, { value: "kn", label: "Kannada" }, { value: "ml", label: "Malayalam" },
    { value: "pa", label: "Punjabi" }, { value: "or", label: "Odia" }
  ];

  // ‚úÖ Submit function with backend call
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (crop && season && state && district) {
      try {
        const response = await fetch("http://127.0.0.1:8000/predict", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            State_Name: state.value,
            District_Name: district.value,
            Season: season.value,
            Crop: crop.value
          })
        });
        const data = await response.json();
        if (data.Predicted_Production) {
          setResult(
            `üåæ Predicted yield for **${crop.value}** in **${season.value}** season at üìç ${district.value}, ${state.value} is **${data.Predicted_Production.toFixed(2)} units**`
          );
        } else {
          setResult("‚ö†Ô∏è Error: " + data.error);
        }
      } catch (err) {
        setResult("‚ö†Ô∏è Server not reachable");
      }
    } else {
      setResult(translations[language.value].warning);
    }
  };

  return (
    <div className="app-wrapper">
      <div className="cursor" style={{ left: mousePos.x, top: mousePos.y }}></div>

      <div className="language-topbar">
        <Select 
          options={languages}
          value={language}
          onChange={setLanguage}
          placeholder={translations[language.value].language}
          isSearchable={false}
        />
      </div>

      <video autoPlay loop muted className="background-video">
        <source src="/field-background.mp4" type="video/mp4" />
      </video>

      <div className={`app-container ${visible ? "visible" : ""}`}>
        <h2>{translations[language.value].title}</h2>
        <form onSubmit={handleSubmit}>
          <label>{translations[language.value].selectCrop}</label>
          <Select options={crops} value={crop} onChange={setCrop} placeholder={translations[language.value].selectCrop + "..."} isSearchable />

          <label>{translations[language.value].selectSeason}</label>
          <Select options={seasons} value={season} onChange={setSeason} placeholder={translations[language.value].selectSeason + "..."} isSearchable />

          <label>{translations[language.value].selectState}</label>
          <Select options={statesOfIndia} value={state} onChange={s => { setState(s); setDistrict(null); }} placeholder={translations[language.value].selectState + "..."} isSearchable />

          {state && (
            <>
              <label>{translations[language.value].selectDistrict}</label>
              <Select 
                options={(districtData[state.value] || []).map(d => ({ value: d, label: d }))}
                value={district}
                onChange={setDistrict}
                placeholder={translations[language.value].selectDistrict + "..."}
                isSearchable
              />
            </>
          )}

          <button type="submit">{translations[language.value].predict}</button>
        </form>

        {result && <div className="result-card">{result}</div>}
      </div>
    </div>
  );
}

export default App;
